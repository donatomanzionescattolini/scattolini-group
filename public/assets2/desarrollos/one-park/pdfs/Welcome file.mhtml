From: <Saved by Blink>
Snapshot-Content-Location: file:///C:/Users/donat/Downloads/UnitTesting.html
Subject: Welcome file
Date: Thu, 12 Oct 2023 01:43:38 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--7bwVxE4MDWV3084bKWSM6ugJGxzIeb5egjlw877iPN----"


------MultipartBoundary--7bwVxE4MDWV3084bKWSM6ugJGxzIeb5egjlw877iPN----
Content-Type: text/html
Content-ID: <frame-B6D959BABE5D0D305315600E83BE53EA@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/Users/donat/Downloads/UnitTesting.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
 =20
  <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D=
1.0">
  <title>Welcome file</title>
  <link rel=3D"stylesheet" href=3D"https://stackedit.io/style.css">
</head>

<body class=3D"stackedit">
  <div class=3D"stackedit__html"><h1 id=3D"unit-testing">Unit Testing</h1>
<p>Unit testing is a fundamental process in software development that invol=
ves testing individual units or components of code to ensure they are funct=
ioning correctly. In Java, unit testing is typically done using a testing f=
ramework such as JUnit, which provides a set of annotations and assertions =
that make it easy to write and execute tests.</p>
<p>JUnit 5 is a testing framework for Java that provides a powerful and fle=
xible way to write and execute tests. It is the latest version of the popul=
ar JUnit framework and comes with many new features and improvements. In th=
is tutorial, we will go through the basics of JUnit 5 and learn how to writ=
e and run tests with examples.</p>
<h2 id=3D"setup"><strong>Setup</strong></h2>
<p>To use JUnit 5, you need to include the <strong><code>junit-jupiter-api<=
/code></strong> and <strong><code>junit-jupiter-engine</code></strong> depe=
ndencies in your project. You can do this by adding the following dependenc=
ies to your <strong><code>pom.xml</code></strong> file if you are using Mav=
en:</p>
<pre class=3D" language-xml"><code class=3D"prism  language-xml">
<span class=3D"token tag"><span class=3D"token tag"><span class=3D"token pu=
nctuation">&lt;</span>dependencies</span><span class=3D"token punctuation">=
&gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;</span>dependency</span><span class=3D"token punctua=
tion">&gt;</span></span>
            <span class=3D"token tag"><span class=3D"token tag"><span class=
=3D"token punctuation">&lt;</span>groupId</span><span class=3D"token punctu=
ation">&gt;</span></span>org.junit.jupiter<span class=3D"token tag"><span c=
lass=3D"token tag"><span class=3D"token punctuation">&lt;/</span>groupId</s=
pan><span class=3D"token punctuation">&gt;</span></span>
            <span class=3D"token tag"><span class=3D"token tag"><span class=
=3D"token punctuation">&lt;</span>artifactId</span><span class=3D"token pun=
ctuation">&gt;</span></span>junit-jupiter<span class=3D"token tag"><span cl=
ass=3D"token tag"><span class=3D"token punctuation">&lt;/</span>artifactId<=
/span><span class=3D"token punctuation">&gt;</span></span>
            <span class=3D"token tag"><span class=3D"token tag"><span class=
=3D"token punctuation">&lt;</span>version</span><span class=3D"token punctu=
ation">&gt;</span></span>5.9.2<span class=3D"token tag"><span class=3D"toke=
n tag"><span class=3D"token punctuation">&lt;/</span>version</span><span cl=
ass=3D"token punctuation">&gt;</span></span>
            <span class=3D"token tag"><span class=3D"token tag"><span class=
=3D"token punctuation">&lt;</span>scope</span><span class=3D"token punctuat=
ion">&gt;</span></span>test<span class=3D"token tag"><span class=3D"token t=
ag"><span class=3D"token punctuation">&lt;/</span>scope</span><span class=
=3D"token punctuation">&gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;/</span>dependency</span><span class=3D"token punctu=
ation">&gt;</span></span>

    <span class=3D"token tag"><span class=3D"token tag"><span class=3D"toke=
n punctuation">&lt;/</span>dependencies</span><span class=3D"token punctuat=
ion">&gt;</span></span>


</code></pre>
<p>If you are using Gradle, add the following dependencies to your <strong>=
<code>build.gradle</code></strong> file:</p>
<pre class=3D" language-xml"><code class=3D"prism  language-xml">
testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2' testRuntimeO=
nly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'


</code></pre>
<h1 id=3D"getting-the-required-dependencies"><strong>Getting the Required D=
ependencies</strong></h1>
<p><mark>You can get the required dependencies by adding the <code>junit-ju=
piter</code> (version 5.9.3) dependency to the <code>test</code> scope</mar=
k> This is an <mark>aggregator artifact</mark> which simplifies the depende=
ncy management because it has the following <mark>transitive dependencies</=
mark>:</p>
<ul>
<li>The <code>junit-jupiter-api</code> dependency (<mark>compile` scope</ma=
rk>) provides the public API for writing tests and extensions.</li>
<li>The <code>junit-jupiter-params</code> dependency (<code>compile</code> =
scope) provides support for writing parameterized tests.</li>
<li>The <code>junit-jupiter-engine</code> dependency  (<mark>runtime` scope=
</mark>)  contains the implementation of the JUnit Jupiter test engine that=
 runs your tests. If you add this dependency to your classpath,  <mark>the =
Maven Surefire and Failsafe plugins</mark> (version 2.22.0 or newer) can ru=
n tests which use JUnit 5.</li>
</ul>
<p>After you have added the required dependency to your POM file, its depen=
dencies section looks as follows:</p>
<pre class=3D" language-xml"><code class=3D"prism  language-xml"><span clas=
s=3D"token tag"><span class=3D"token tag"><span class=3D"token punctuation"=
>&lt;</span>dependencies</span><span class=3D"token punctuation">&gt;</span=
></span>
    <span class=3D"token tag"><span class=3D"token tag"><span class=3D"toke=
n punctuation">&lt;</span>dependency</span><span class=3D"token punctuation=
">&gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;</span>groupId</span><span class=3D"token punctuatio=
n">&gt;</span></span>org.junit.jupiter<span class=3D"token tag"><span class=
=3D"token tag"><span class=3D"token punctuation">&lt;/</span>groupId</span>=
<span class=3D"token punctuation">&gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;</span>artifactId</span><span class=3D"token punctua=
tion">&gt;</span></span>junit-jupiter<span class=3D"token tag"><span class=
=3D"token tag"><span class=3D"token punctuation">&lt;/</span>artifactId</sp=
an><span class=3D"token punctuation">&gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;</span>version</span><span class=3D"token punctuatio=
n">&gt;</span></span>5.9.3<span class=3D"token tag"><span class=3D"token ta=
g"><span class=3D"token punctuation">&lt;/</span>version</span><span class=
=3D"token punctuation">&gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;</span>scope</span><span class=3D"token punctuation"=
>&gt;</span></span>test<span class=3D"token tag"><span class=3D"token tag">=
<span class=3D"token punctuation">&lt;/</span>scope</span><span class=3D"to=
ken punctuation">&gt;</span></span>
    <span class=3D"token tag"><span class=3D"token tag"><span class=3D"toke=
n punctuation">&lt;/</span>dependency</span><span class=3D"token punctuatio=
n">&gt;</span></span>
<span class=3D"token tag"><span class=3D"token tag"><span class=3D"token pu=
nctuation">&lt;/</span>dependencies</span><span class=3D"token punctuation"=
>&gt;</span></span>

</code></pre>
<p><strong>Additional Reading:</strong></p>
<ul>
<li><a href=3D"https://junit.org/junit5/docs/current/user-guide/#dependency=
-metadata">JUnit 5 User Guide: 10.2. Dependency Metadata</a></li>
</ul>
<p>After you have declared the required dependencies, you have to configure=
 the Maven Surefire Plugin. Let=E2=80=99s find out how you can do it.</p>
<h1 id=3D"configuring-the-maven-surefire-plugin"><strong>Configuring the Ma=
ven Surefire Plugin</strong></h1>
<p>You can run your tests by using <mark>the Maven Surefire Plugin</mark>. =
Because you want to use its <mark>native JUnit 5 support</mark>, you have t=
o use the version 2.22.0 (or newer).</p>
<p>After you have ensured that your tests are run by the Maven Surefire Plu=
gin 2.22.2, the <code>build</code> section of your POM file looks as follow=
s:</p>
<pre class=3D" language-xml"><code class=3D"prism  language-xml"><span clas=
s=3D"token tag"><span class=3D"token tag"><span class=3D"token punctuation"=
>&lt;</span>build</span><span class=3D"token punctuation">&gt;</span></span=
>
    <span class=3D"token tag"><span class=3D"token tag"><span class=3D"toke=
n punctuation">&lt;</span>plugins</span><span class=3D"token punctuation">&=
gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;</span>plugin</span><span class=3D"token punctuation=
">&gt;</span></span>
            <span class=3D"token tag"><span class=3D"token tag"><span class=
=3D"token punctuation">&lt;</span>groupId</span><span class=3D"token punctu=
ation">&gt;</span></span>org.apache.maven.plugins<span class=3D"token tag">=
<span class=3D"token tag"><span class=3D"token punctuation">&lt;/</span>gro=
upId</span><span class=3D"token punctuation">&gt;</span></span>
            <span class=3D"token tag"><span class=3D"token tag"><span class=
=3D"token punctuation">&lt;</span>artifactId</span><span class=3D"token pun=
ctuation">&gt;</span></span>maven-surefire-plugin<span class=3D"token tag">=
<span class=3D"token tag"><span class=3D"token punctuation">&lt;/</span>art=
ifactId</span><span class=3D"token punctuation">&gt;</span></span>
            <span class=3D"token tag"><span class=3D"token tag"><span class=
=3D"token punctuation">&lt;</span>version</span><span class=3D"token punctu=
ation">&gt;</span></span>2.22.2<span class=3D"token tag"><span class=3D"tok=
en tag"><span class=3D"token punctuation">&lt;/</span>version</span><span c=
lass=3D"token punctuation">&gt;</span></span>
        <span class=3D"token tag"><span class=3D"token tag"><span class=3D"=
token punctuation">&lt;/</span>plugin</span><span class=3D"token punctuatio=
n">&gt;</span></span>
    <span class=3D"token tag"><span class=3D"token tag"><span class=3D"toke=
n punctuation">&lt;/</span>plugins</span><span class=3D"token punctuation">=
&gt;</span></span>
<span class=3D"token tag"><span class=3D"token tag"><span class=3D"token pu=
nctuation">&lt;/</span>build</span><span class=3D"token punctuation">&gt;</=
span></span>

</code></pre>
<p>There are three things I want to point out:</p>
<p><strong>First</strong>, if you want to use the native JUnit 5 support of=
 the Maven Surefire Plugin, you must ensure that at least one test engine i=
mplementation is found from the <mark>classpath</mark>. That=E2=80=99s why =
you had to ensure that the <code>junit-jupiter-engine</code> dependency is =
found from the classpath when you configured the dependencies of your Maven=
 build.</p>
<p><strong>Second</strong>, if you use the <mark>default configuration</mar=
k> of the Maven Surefire Plugin, it runs all test methods found from a test=
 class if the name of the test class:</p>
<ul>
<li>Starts or ends with the string: <code>Test</code>.</li>
<li>Ends with the string: <code>Tests</code>.</li>
<li>Ends with the string: <code>TestCase</code>.</li>
</ul>
<p><strong>Third</strong>, the Maven Surefire Plugin is designed to run uni=
t tests. If you want to run integration tests with Maven, you should use th=
e <mark>[Maven Failsafe Plugin]</mark>(<a href=3D"https://maven.apache.org/=
surefire/maven-failsafe-plugin/">https://maven.apache.org/surefire/maven-fa=
ilsafe-plugin/</a>).</p>
<p><strong>Additional Reading:</strong></p>
<ul>
<li><a href=3D"http://junit.org/junit5/docs/current/user-guide/#running-tes=
ts-build-maven">JUnit 5 User Guide: 4.2.2. Maven</a></li>
<li><a href=3D"http://maven.apache.org/surefire/maven-surefire-plugin/examp=
les/junit-platform.html#">Maven Surefire Plugin: Using JUnit 5 Platform</a>=
</li>
</ul>
<p>You have now created a Maven project that can run tests which use JUnit =
5. Let=E2=80=99s move on and write a simple test with JUnit 5.</p>
<h1 id=3D"writing-a-simple-unit-test"><strong>Writing a Simple Unit Test</s=
trong></h1>
<p>Before you can write tests which use JUnit 5, you have to know these two=
 things:</p>
<ul>
<li>By default, the <em>src/test/java</em> directory contains the source co=
de of your tests.</li>
<li><mark>By default, the <em>src/test/resources</em> directory contains th=
e resources of your tests</mark>.</li>
</ul>
<p>Let=E2=80=99s create a new test class and add an empty test method to th=
e created class. After you have written your test class, its source code lo=
oks as follows:</p>
<pre class=3D" language-java"><code class=3D"prism  language-java"><span cl=
ass=3D"token keyword">import</span> org<span class=3D"token punctuation">.<=
/span>junit<span class=3D"token punctuation">.</span>jupiter<span class=3D"=
token punctuation">.</span>api<span class=3D"token punctuation">.</span>Tes=
t<span class=3D"token punctuation">;</span>
=20
<span class=3D"token keyword">class</span> <span class=3D"token class-name"=
>JUnit5ExampleTest</span> <span class=3D"token punctuation">{</span>
=20
    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">justAnExample</span><span class=3D"token punctuation">(</span><span class=
=3D"token punctuation">)</span> <span class=3D"token punctuation">{</span>
=20
    <span class=3D"token punctuation">}</span>
<span class=3D"token punctuation">}</span>

</code></pre>
<p>If you want to get more information about JUnit 5 test classes, you shou=
ld take a look at the lesson: <a href=3D"https://www.cleantestautomation.co=
m/lessons/introduction-to-normal-test-classes/">Introduction to =E2=80=9CNo=
rmal=E2=80=9D Test Classes</a>. Also, <strong>it=E2=80=99s not a good idea =
to write empty test methods</strong>. I use this technique here only becaus=
e I want to demonstrate that your test method is run by the Maven Surefire =
Plugin.</p>
<p>Next, you will find out how you can run your tests.</p>
<h1 id=3D"running-your-test-with-maven"><strong>Running Your Test With Mave=
n</strong></h1>
<p>You can run your tests with Maven by using the command: <mark><strong><e=
m>mvn clean test</em>.</strong></mark> When you run this command at command=
 prompt, you should see that the Maven Surefire Plugin runs your test:</p>
<h1 id=3D"the-structure-of-a-test-class"><strong>The Structure of a Test Cl=
ass</strong></h1>
<p>A JUnit 5 test class is basically a container that can contain:</p>
<ul>
<li><strong>Test methods</strong>. These methods contain the code which ver=
ifies that the tested code (aka system under test) is working as expected.<=
/li>
<li><mark>Lifecycle methods</mark> such as setup and teardown methods. Setu=
p methods are used to configure the system under test. Teardown methods are=
 used to clean up the mess that was created by the setup methods. For examp=
le, a teardown method might free the resources which were reserved by a set=
up method or clean the state that was created by a setup method.</li>
<li>Other test classes. I won=E2=80=99t cover <mark>nested test classes</ma=
rk> in this lesson. If you want to get more information about nested test c=
lasses, you should read the lesson: <mark>Introduction to Nested Test Class=
es</mark>.</li>
</ul>
<p>A JUnit 5 test class can have <mark>two types of setup methods</mark>:</=
p>
<ul>
<li>A setup method that=E2=80=99s invoked once before <em><strong>the</stro=
ng></em> test methods are run. You should use this setup method when you wa=
nt to configure something that=E2=80=99s used by all test methods and the c=
onfiguration process is so slow that you want to do it only once per a test=
 class.</li>
<li>A setup method that=E2=80=99s invoked before <em><strong>a</strong></em=
> test method is run. You should use this setup method when you want to ens=
ure that the end state of an invoked test method cannot interfere with the =
execution of the next test method. In other words, this setup method is a g=
ood choice if you have to configure <mark>stateful objects</mark> (such as =
<a href=3D"https://martinfowler.com/bliki/TestDouble.html">test doubles</a>=
) and you want to ensure that every test method gets a clean state.</li>
</ul>
<p>As you probably guessed, A JUnit 5 test class can also have <mark>two ty=
pes of teardown methods</mark>:</p>
<ul>
<li>A teardown method that=E2=80=99s invoked <em><strong>after each</strong=
></em> test method has been run. You should use this teardown method when y=
ou have to clean up the mess that was made by the setup method that=E2=80=
=99s run before a test method is run.</li>
<li>A teardown method that=E2=80=99s invoked once <em><strong>after all</st=
rong></em> test methods have been run. You should use this teardown method =
when you have to clean up the mess that was made by the setup method that=
=E2=80=99s run once before the test methods are run</li>
</ul>
<p>Let=E2=80=99s move on and find out how you can create your first test cl=
ass with JUnit 5.</p>
<h1 id=3D"creating-your-first-test-class"><strong>Creating Your First Test =
Class</strong></h1>
<p>A test class is a <strong>normal Java class that=E2=80=99s either <code>=
public</code> or package private</strong>. You can create a new test class =
by following these steps:</p>
<ol>
<li>Create a new package private class.</li>
<li>Configure the display name of your test class by annotating it with the=
 <code>@DisplayName</code> annotation. This is an optional step, but I thin=
k that you must always use the <mark>@DisplayName</mark> annotation because=
 it allows you to <mark>specify a custom display name that=E2=80=99s used b=
y your IDE and other build tools when they create or show test reports</mar=
k>. In other words, you can replace a technical name with a sentence that d=
escribes the purpose of your test class.</li>
</ol>
<p>After you have created your first test class, its source code looks as f=
ollows:</p>
<pre class=3D" language-java"><code class=3D"prism  language-java"><span cl=
ass=3D"token keyword">import</span> org<span class=3D"token punctuation">.<=
/span>junit<span class=3D"token punctuation">.</span>jupiter<span class=3D"=
token punctuation">.</span>api<span class=3D"token punctuation">.</span>Dis=
playName<span class=3D"token punctuation">;</span>
=20
<span class=3D"token annotation punctuation">@DisplayName</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">"JUnit 5 Exampl=
e"</span><span class=3D"token punctuation">)</span>
<span class=3D"token keyword">class</span> <span class=3D"token class-name"=
>JUnit5ExampleTest</span> <span class=3D"token punctuation">{</span>
=20
<span class=3D"token punctuation">}</span>

</code></pre>
<aside> =F0=9F=92=A1 A good display name of a test class could be:
</aside><ul>
<li>API tests for the todo item API. This is a good name if you are writing=
 unit tests for a REST API that allows you to manage todo items.</li>
<li>Tests for the CRUD operations of todo items. This is a good name if you=
 are writing unit tests for a service that provides CRUD operations for tod=
o items.</li>
<li>Update the information of an existing todo item. This is a good name if=
 you are writing integration tests for an API endpoint that updates the inf=
ormation of an existing todo item.</li>
</ul>
<p><strong>Additional Reading:</strong></p>
<ul>
<li><a href=3D"http://junit.org/junit5/docs/current/user-guide/#writing-tes=
ts-display-names">JUnit 5 User Guide: 2.3. Display Names</a></li>
<li><a href=3D"http://junit.org/junit5/docs/current/user-guide/#running-tes=
ts-junit-platform-runner-technical-names">JUnit 5 User Guide: 4.4.2. Displa=
y Names vs. Technical Names</a></li>
<li><a href=3D"https://junit.org/junit5/docs/current/api/org.junit.jupiter.=
api/org/junit/jupiter/api/DisplayName.html">The Javadoc of the <code>@Displ=
ayName</code> annotation</a> </li>
</ul>
<p>You have now created your first test class. Next, you will learn to add =
setup and teardown methods to your test class.</p>
<pre class=3D" language-java"><code class=3D"prism  language-java"><span cl=
ass=3D"token keyword">import</span> org<span class=3D"token punctuation">.<=
/span>junit<span class=3D"token punctuation">.</span>jupiter<span class=3D"=
token punctuation">.</span>api<span class=3D"token punctuation">.</span>Bef=
oreAll<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>DisplayName<span class=3D"token punctuation">;</span>
=20
<span class=3D"token annotation punctuation">@DisplayName</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">"JUnit 5 Exampl=
e"</span><span class=3D"token punctuation">)</span>
<span class=3D"token keyword">class</span> <span class=3D"token class-name"=
>JUnit5ExampleTest</span> <span class=3D"token punctuation">{</span>
=20
    <span class=3D"token annotation punctuation">@BeforeAll</span>
    <span class=3D"token keyword">static</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">beforeAll</span><span class=
=3D"token punctuation">(</span><span class=3D"token punctuation">)</span> <=
span class=3D"token punctuation">{</span>
        System<span class=3D"token punctuation">.</span>out<span class=3D"t=
oken punctuation">.</span><span class=3D"token function">println</span><spa=
n class=3D"token punctuation">(</span><span class=3D"token string">"Before =
all test methods"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
<span class=3D"token punctuation">}</span>

</code></pre>
<p><strong>Second</strong>, create a setup method that=E2=80=99s invoked be=
fore a test method is run. You can create this method by following these st=
eps:</p>
<ol>
<li>Add a package private method to your test class and ensure that it does=
n=E2=80=99t return anything.</li>
<li>Annotate your setup method with the <code>@BeforeEach</code> annotation=
.</li>
</ol>
<p>After you have added this setup method to your test class, its source co=
de looks as follows:</p>
<pre class=3D" language-java"><code class=3D"prism  language-java">
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>BeforeAll<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>BeforeEach<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>DisplayName<span class=3D"token punctuation">;</span>
=20
<span class=3D"token annotation punctuation">@DisplayName</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">"JUnit 5 Exampl=
e"</span><span class=3D"token punctuation">)</span>
<span class=3D"token keyword">class</span> <span class=3D"token class-name"=
>JUnit5ExampleTest</span> <span class=3D"token punctuation">{</span>
=20
    <span class=3D"token annotation punctuation">@BeforeAll</span>
    <span class=3D"token keyword">static</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">beforeAll</span><span class=
=3D"token punctuation">(</span><span class=3D"token punctuation">)</span> <=
span class=3D"token punctuation">{</span>
        System<span class=3D"token punctuation">.</span>out<span class=3D"t=
oken punctuation">.</span><span class=3D"token function">println</span><spa=
n class=3D"token punctuation">(</span><span class=3D"token string">"Before =
all test methods"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
=20
    <span class=3D"token annotation punctuation">@BeforeEach</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">beforeEach</span><span class=3D"token punctuation">(</span><span class=3D=
"token punctuation">)</span> <span class=3D"token punctuation">{</span>
        System<span class=3D"token punctuation">.</span>out<span class=3D"t=
oken punctuation">.</span><span class=3D"token function">println</span><spa=
n class=3D"token punctuation">(</span><span class=3D"token string">"Before =
each test method"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
<span class=3D"token punctuation">}</span>

</code></pre>
<h1 id=3D"adding-setup-and-teardown-methods-to-a-test-class"><strong>Adding=
 Setup And Teardown Methods to a Test Class</strong></h1>
<p>The setup and teardown methods which are added to a test class must fulf=
ill these two conditions:</p>
<ul>
<li><strong>These methods must not return anything</strong>. In other words=
, their return type must be <code>void</code>.</li>
<li>Setup and teardown methods <strong>cannot be private</strong>.</li>
</ul>
<p>You can add all setup and teardown methods to your test class by followi=
ng these steps:</p>
<p><strong>First</strong>, create a setup method that=E2=80=99s invoked onc=
e before the test methods are run. You can create this method by following =
these steps:</p>
<ol>
<li>Add a <code>static</code> and package private method to your test class=
 and ensure that it doesn=E2=80=99t return anything.</li>
<li>Annotate your setup method with the <code>@BeforeAll</code> annotation.=
</li>
</ol>
<p>After you have added this setup method to your test class, its source co=
de looks as follows:</p>
<h2 id=3D"writing-tests"><strong>Writing Tests</strong></h2>
<p>JUnit 5 supports several types of tests, including <mark>parameterized t=
ests</mark>, <mark>dynamic tests</mark>, and <mark>nested tests</mark>. Let=
=E2=80=99s start by writing a simple test case for a method that adds two n=
umbers:</p>
<pre class=3D" language-java"><code class=3D"prism  language-java">
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>Assertions<span class=3D"token punctuation">;</span>=20
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>Test<span class=3D"token punctuation">;</span>=20
<span class=3D"token keyword">public</span> classMathUtilsTest <span class=
=3D"token punctuation">{</span>=20
<span class=3D"token annotation punctuation">@Test</span>=20
<span class=3D"token keyword">public</span> <span class=3D"token keyword">v=
oid</span> <span class=3D"token function">testAdd</span><span class=3D"toke=
n punctuation">(</span><span class=3D"token punctuation">)</span> <span cla=
ss=3D"token punctuation">{</span>=20
MathUtils mathUtils <span class=3D"token operator">=3D</span> <span class=
=3D"token keyword">new</span> <span class=3D"token class-name">MathUtils</s=
pan><span class=3D"token punctuation">(</span><span class=3D"token punctuat=
ion">)</span><span class=3D"token punctuation">;</span>=20
intresult <span class=3D"token operator">=3D</span> mathUtils<span class=3D=
"token punctuation">.</span><span class=3D"token function">add</span><span =
class=3D"token punctuation">(</span><span class=3D"token number">1</span><s=
pan class=3D"token punctuation">,</span> <span class=3D"token number">2</sp=
an><span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">;</span>=20

Assertions<span class=3D"token punctuation">.</span><span class=3D"token fu=
nction">assertEquals</span><span class=3D"token punctuation">(</span><span =
class=3D"token number">3</span><span class=3D"token punctuation">,</span> r=
esult<span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">;</span> <span class=3D"token punctuation">}</span>=20
<span class=3D"token punctuation">}</span>


</code></pre>
<p>In the above example, we have written a test case for the <strong><code>=
add</code></strong> method of the <strong><code>MathUtils</code></strong> c=
lass. The <strong><code>@Test</code></strong> annotation indicates that thi=
s method is a test case. We create an instance of the <strong><code>MathUti=
ls</code></strong> class, call the <strong><code>add</code></strong> method=
 with the arguments 1 and 2, and then use the <strong><code>assertEquals</c=
ode></strong> method of the <strong><code>Assertions</code></strong> class =
to check if the result is equal to 3.</p>
<h3 id=3D"assertions"><strong>Assertions</strong></h3>
<p>JUnit 5 provides a rich set of assertions for testing various types of v=
alues. Some of the commonly used assertions are:</p>
<ul>
<li>
<p><mark><strong><code>assertEquals(expected, actual)</code></strong></mark=
>: checks if the expected and actual values are equal.</p>
</li>
<li>
<p><mark><strong><code>assertNotEquals(expected, actual)</code></strong></m=
ark>: checks if the expected and actual values are not equal.</p>
</li>
<li>
<p><mark><strong><code>assertTrue(condition)</code></strong></mark>: checks=
 if the condition is true.</p>
</li>
</ul>
<ol>
<li>Writing a Simple Test</li>
</ol>
<p><mark>A test in JUnit is defined as a method that is annotated with the =
<strong><code>@Test</code></strong> annotation</mark>. The test method <mar=
k>should contain one or more assertions that verify the expected behavior o=
f the code being tested</mark>. Here is an example of a simple test:</p>
<pre class=3D" language-java"><code class=3D"prism  language-java">
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>Test<span clas=
s=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> <span class=3D"token keyword">s=
tatic</span> org<span class=3D"token punctuation">.</span>junit<span class=
=3D"token punctuation">.</span>Assert<span class=3D"token punctuation">.</s=
pan>assertEquals<span class=3D"token punctuation">;</span>

<span class=3D"token keyword">public</span> <span class=3D"token keyword">c=
lass</span> <span class=3D"token class-name">CalculatorTest</span> <span cl=
ass=3D"token punctuation">{</span>
    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">testAddition</span><span clas=
s=3D"token punctuation">(</span><span class=3D"token punctuation">)</span> =
<span class=3D"token punctuation">{</span>
        Calculator calculator <span class=3D"token operator">=3D</span> <sp=
an class=3D"token keyword">new</span> <span class=3D"token class-name">Calc=
ulator</span><span class=3D"token punctuation">(</span><span class=3D"token=
 punctuation">)</span><span class=3D"token punctuation">;</span>
        <span class=3D"token function">assertEquals</span><span class=3D"to=
ken punctuation">(</span><span class=3D"token number">2</span><span class=
=3D"token punctuation">,</span> calculator<span class=3D"token punctuation"=
>.</span><span class=3D"token function">add</span><span class=3D"token punc=
tuation">(</span><span class=3D"token number">1</span><span class=3D"token =
punctuation">,</span> <span class=3D"token number">1</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
<span class=3D"token punctuation">}</span>


</code></pre>
<p>In this example, the <strong><code>testAddition()</code></strong> method=
 is annotated with <strong><code>@Test</code></strong> to indicate that it =
is a test. The <strong><code>Calculator</code></strong> class is instantiat=
ed, and the <strong><code>add()</code></strong> method is called with the a=
rguments <strong><code>1</code></strong> and <strong><code>1</code></strong=
>. The <strong><code>assertEquals()</code></strong> method is used to verif=
y that the result of the addition is <strong><code>2</code></strong>.</p>
<h1 id=3D"testing-exceptions-">=3D=3DTesting Exceptions =3D=3D</h1>
<p>Sometimes, you may want to test that your code throws an exception under=
 certain conditions. In JUnit, you can use the <mark>assertThrows()</mark> =
to specify the expected exception. Here is an example:</p>
<pre class=3D" language-java"><code class=3D"prism  language-java">
<span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">div</span><span class=3D"token punctuation">(</span><span class=3D"token =
punctuation">)</span> <span class=3D"token punctuation">{</span>
      =20
       <span class=3D"token function">assertThrows</span><span class=3D"tok=
en punctuation">(</span>ArithmeticException<span class=3D"token punctuation=
">.</span><span class=3D"token keyword">class</span><span class=3D"token pu=
nctuation">,</span><span class=3D"token punctuation">(</span><span class=3D=
"token punctuation">)</span><span class=3D"token operator">-</span><span cl=
ass=3D"token operator">&gt;</span> calculator<span class=3D"token punctuati=
on">.</span><span class=3D"token function">div</span><span class=3D"token p=
unctuation">(</span><span class=3D"token number">10</span><span class=3D"to=
ken punctuation">,</span><span class=3D"token number">0</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">,</span><s=
pan class=3D"token string">"  /zero should throw exception"</span><span cla=
ss=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>


</code></pre>
<ol>
<li>Using Before and After Hooks</li>
</ol>
<p>In some cases, you may want to perform setup or cleanup tasks <mark>befo=
re or after each test</mark>. JUnit provides two annotations for this purpo=
se: <strong><code>@Before</code></strong> and <strong><code>@After</code></=
strong>. Here is an example:</p>
<pre class=3D" language-java"><code class=3D"prism  language-java">
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>After<span cla=
ss=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>Before<span cl=
ass=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>Test<span clas=
s=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> <span class=3D"token keyword">s=
tatic</span> org<span class=3D"token punctuation">.</span>junit<span class=
=3D"token punctuation">.</span>Assert<span class=3D"token punctuation">.</s=
pan>assertEquals<span class=3D"token punctuation">;</span>

<span class=3D"token keyword">public</span> <span class=3D"token keyword">c=
lass</span> <span class=3D"token class-name">CalculatorTest</span> <span cl=
ass=3D"token punctuation">{</span>
    <span class=3D"token keyword">private</span> Calculator calculator<span=
 class=3D"token punctuation">;</span>

    <span class=3D"token annotation punctuation">@Before</span>
    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">setUp</span><span class=3D"to=
ken punctuation">(</span><span class=3D"token punctuation">)</span> <span c=
lass=3D"token punctuation">{</span>
        calculator <span class=3D"token operator">=3D</span> <span class=3D=
"token keyword">new</span> <span class=3D"token class-name">Calculator</spa=
n><span class=3D"token punctuation">(</span><span class=3D"token punctuatio=
n">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@After</span>
    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">tearDown</span><span class=3D=
"token punctuation">(</span><span class=3D"token punctuation">)</span> <spa=
n class=3D"token punctuation">{</span>
        calculator <span class=3D"token operator">=3D</span> null<span clas=
s=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">testAddition</span><span clas=
s=3D"token punctuation">(</span><span class=3D"token punctuation">)</span> =
<span class=3D"token punctuation">{</span>
        <span class=3D"token function">assertEquals</span><span class=3D"to=
ken punctuation">(</span><span class=3D"token number">2</span><span class=
=3D"token punctuation">,</span> calculator<span class=3D"token punctuation"=
>.</span><span class=3D"token function">add</span><span class=3D"token punc=
tuation">(</span><span class=3D"token number">1</span><span class=3D"token =
punctuation">,</span> <span class=3D"token number">1</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">testSubtraction</span><span c=
lass=3D"token punctuation">(</span><span class=3D"token punctuation">)</spa=
n> <span class=3D"token punctuation">{</span>
        <span class=3D"token function">assertEquals</span><span class=3D"to=
ken punctuation">(</span><span class=3D"token number">0</span><span class=
=3D"token punctuation">,</span> calculator<span class=3D"token punctuation"=
>.</span><span class=3D"token function">subtract</span><span class=3D"token=
 punctuation">(</span><span class=3D"token number">1</span><span class=3D"t=
oken punctuation">,</span> <span class=3D"token number">1</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span><s=
pan class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
<span class=3D"token punctuation">}</span>


</code></pre>
<p>In this example, the <strong><code>@Before</code></strong> annotation is=
 used to annotate the <strong><code>setUp()</code></strong> method, which i=
s called before each test. The <strong><code>@After</code></strong> annotat=
ion is used to annotate the <strong><code>tearDown()</code></strong> method=
, which is called after each test. In this case, the <strong><code>Calculat=
or</code></strong> object is created in the</p>
<pre class=3D" language-java"><code class=3D"prism  language-java"><span cl=
ass=3D"token keyword">public</span> <span class=3D"token keyword">class</sp=
an> <span class=3D"token class-name">Employee</span> <span class=3D"token p=
unctuation">{</span>
   =20
    <span class=3D"token keyword">private</span> String username<span class=
=3D"token punctuation">;</span>
    <span class=3D"token keyword">private</span> String email<span class=3D=
"token punctuation">;</span>
    <span class=3D"token keyword">private</span>  <span class=3D"token keyw=
ord">boolean</span> active<span class=3D"token punctuation">;</span>

    <span class=3D"token keyword">public</span> <span class=3D"token functi=
on">Employee</span><span class=3D"token punctuation">(</span>String usernam=
e<span class=3D"token punctuation">,</span> String email<span class=3D"toke=
n punctuation">,</span> <span class=3D"token keyword">boolean</span> active=
<span class=3D"token punctuation">)</span> <span class=3D"token punctuation=
">{</span>
        <span class=3D"token keyword">this</span><span class=3D"token punct=
uation">.</span>username <span class=3D"token operator">=3D</span> username=
<span class=3D"token punctuation">;</span>
        <span class=3D"token keyword">this</span><span class=3D"token punct=
uation">.</span>email <span class=3D"token operator">=3D</span> email<span =
class=3D"token punctuation">;</span>
        <span class=3D"token keyword">this</span><span class=3D"token punct=
uation">.</span>active <span class=3D"token operator">=3D</span> active<spa=
n class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">public</span> String <span class=3D"token=
 function">getUsername</span><span class=3D"token punctuation">(</span><spa=
n class=3D"token punctuation">)</span> <span class=3D"token punctuation">{<=
/span>
        <span class=3D"token keyword">return</span> username<span class=3D"=
token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">setUsername</span><span class=
=3D"token punctuation">(</span>String username<span class=3D"token punctuat=
ion">)</span> <span class=3D"token punctuation">{</span>
        <span class=3D"token keyword">this</span><span class=3D"token punct=
uation">.</span>username <span class=3D"token operator">=3D</span> username=
<span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">public</span> String <span class=3D"token=
 function">getEmail</span><span class=3D"token punctuation">(</span><span c=
lass=3D"token punctuation">)</span> <span class=3D"token punctuation">{</sp=
an>
        <span class=3D"token keyword">return</span> email<span class=3D"tok=
en punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">setEmail</span><span class=3D=
"token punctuation">(</span>String email<span class=3D"token punctuation">)=
</span> <span class=3D"token punctuation">{</span>
        <span class=3D"token keyword">this</span><span class=3D"token punct=
uation">.</span>email <span class=3D"token operator">=3D</span> email<span =
class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">boolean</span> <span class=3D"token function">isActive</span><span class=
=3D"token punctuation">(</span><span class=3D"token punctuation">)</span> <=
span class=3D"token punctuation">{</span>
        <span class=3D"token keyword">return</span> active<span class=3D"to=
ken punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">public</span> <span class=3D"token keywor=
d">void</span> <span class=3D"token function">setActive</span><span class=
=3D"token punctuation">(</span><span class=3D"token keyword">boolean</span>=
 active<span class=3D"token punctuation">)</span> <span class=3D"token punc=
tuation">{</span>
        <span class=3D"token keyword">this</span><span class=3D"token punct=
uation">.</span>active <span class=3D"token operator">=3D</span> active<spa=
n class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
<span class=3D"token punctuation">}</span>

</code></pre>
<pre class=3D" language-java"><code class=3D"prism  language-java"><span cl=
ass=3D"token keyword">import</span> org<span class=3D"token punctuation">.<=
/span>junit<span class=3D"token punctuation">.</span>jupiter<span class=3D"=
token punctuation">.</span>api<span class=3D"token punctuation">.</span>Aft=
erEach<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>Assertions<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>BeforeEach<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>api<span class=3D"token punctuation">.</=
span>Test<span class=3D"token punctuation">;</span>

<span class=3D"token keyword">import</span> <span class=3D"token keyword">s=
tatic</span> org<span class=3D"token punctuation">.</span>junit<span class=
=3D"token punctuation">.</span>jupiter<span class=3D"token punctuation">.</=
span>api<span class=3D"token punctuation">.</span>Assertions<span class=3D"=
token punctuation">.</span>*<span class=3D"token punctuation">;</span>

<span class=3D"token keyword">class</span> <span class=3D"token class-name"=
>EmployeeTest</span> <span class=3D"token punctuation">{</span>
    Employee employee<span class=3D"token punctuation">;</span>

    <span class=3D"token annotation punctuation">@BeforeEach</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">setUp</span><span class=3D"token punctuation">(</span><span class=3D"toke=
n punctuation">)</span> <span class=3D"token punctuation">{</span>
        employee <span class=3D"token operator">=3D</span> <span class=3D"t=
oken keyword">new</span> <span class=3D"token class-name">Employee</span><s=
pan class=3D"token punctuation">(</span><span class=3D"token string">"johnD=
oe12"</span><span class=3D"token punctuation">,</span> <span class=3D"token=
 string">"johndode@dev.com"</span><span class=3D"token punctuation">,</span=
> <span class=3D"token boolean">true</span><span class=3D"token punctuation=
">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@AfterEach</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">tearDown</span><span class=3D"token punctuation">(</span><span class=3D"t=
oken punctuation">)</span> <span class=3D"token punctuation">{</span>
        employee <span class=3D"token operator">=3D</span> null<span class=
=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">getUsername</span><span class=3D"token punctuation">(</span><span class=
=3D"token punctuation">)</span> <span class=3D"token punctuation">{</span>
        Assertions<span class=3D"token punctuation">.</span><span class=3D"=
token function">assertEquals</span><span class=3D"token punctuation">(</spa=
n><span class=3D"token string">"johnDoe12"</span><span class=3D"token punct=
uation">,</span> employee<span class=3D"token punctuation">.</span><span cl=
ass=3D"token function">getUsername</span><span class=3D"token punctuation">=
(</span><span class=3D"token punctuation">)</span><span class=3D"token punc=
tuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">getEmail</span><span class=3D"token punctuation">(</span><span class=3D"t=
oken punctuation">)</span> <span class=3D"token punctuation">{</span>
        Assertions<span class=3D"token punctuation">.</span><span class=3D"=
token function">assertEquals</span><span class=3D"token punctuation">(</spa=
n><span class=3D"token string">"johndode@dev.com"</span><span class=3D"toke=
n punctuation">,</span> employee<span class=3D"token punctuation">.</span><=
span class=3D"token function">getEmail</span><span class=3D"token punctuati=
on">(</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">isActive</span><span class=3D"token punctuation">(</span><span class=3D"t=
oken punctuation">)</span> <span class=3D"token punctuation">{</span>

        Assertions<span class=3D"token punctuation">.</span><span class=3D"=
token function">assertTrue</span><span class=3D"token punctuation">(</span>=
employee<span class=3D"token punctuation">.</span><span class=3D"token func=
tion">isActive</span><span class=3D"token punctuation">(</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">,</span> <=
span class=3D"token string">" employee should be active"</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
<span class=3D"token punctuation">}</span>

</code></pre>
<pre class=3D" language-java"><code class=3D"prism  language-java"><span cl=
ass=3D"token keyword">public</span> <span class=3D"token keyword">class</sp=
an> <span class=3D"token class-name">Numbers</span> <span class=3D"token pu=
nctuation">{</span>
        <span class=3D"token keyword">public</span> <span class=3D"token ke=
yword">static</span> <span class=3D"token keyword">boolean</span> <span cla=
ss=3D"token function">isEven</span><span class=3D"token punctuation">(</spa=
n><span class=3D"token keyword">int</span> number<span class=3D"token punct=
uation">)</span> <span class=3D"token punctuation">{</span>
            <span class=3D"token keyword">return</span> number <span class=
=3D"token operator">%</span> <span class=3D"token number">2</span> <span cl=
ass=3D"token operator">=3D=3D</span> <span class=3D"token number">0</span><=
span class=3D"token punctuation">;</span>
        <span class=3D"token punctuation">}</span>

        <span class=3D"token keyword">public</span> <span class=3D"token ke=
yword">static</span> <span class=3D"token keyword">boolean</span> <span cla=
ss=3D"token function">isOdd</span><span class=3D"token punctuation">(</span=
><span class=3D"token keyword">int</span> number<span class=3D"token punctu=
ation">)</span> <span class=3D"token punctuation">{</span>
            <span class=3D"token keyword">return</span> number <span class=
=3D"token operator">%</span> <span class=3D"token number">2</span> <span cl=
ass=3D"token operator">!=3D</span> <span class=3D"token number">0</span><sp=
an class=3D"token punctuation">;</span>
        <span class=3D"token punctuation">}</span>
        <span class=3D"token keyword">public</span> <span class=3D"token ke=
yword">static</span> <span class=3D"token keyword">boolean</span> <span cla=
ss=3D"token function">isBlank</span><span class=3D"token punctuation">(</sp=
an>String input<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">{</span>
            <span class=3D"token keyword">return</span> input<span class=3D=
"token operator">=3D=3D</span>null <span class=3D"token operator">||</span>=
 input<span class=3D"token punctuation">.</span><span class=3D"token functi=
on">trim</span><span class=3D"token punctuation">(</span><span class=3D"tok=
en punctuation">)</span><span class=3D"token punctuation">.</span><span cla=
ss=3D"token function">isEmpty</span><span class=3D"token punctuation">(</sp=
an><span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">;</span>
        <span class=3D"token punctuation">}</span>
    <span class=3D"token punctuation">}</span>

</code></pre>
<h1 id=3D"parametized-tests"><mark>Parametized Tests</mark></h1>
<h2 id=3D"parametizedtest"><mark>@ParametizedTest</mark></h2>
<h2 id=3D"valuesource"><mark>@ValueSource()</mark></h2>
<pre class=3D" language-java"><code class=3D"prism  language-java"><span cl=
ass=3D"token keyword">import</span> org<span class=3D"token punctuation">.<=
/span>junit<span class=3D"token punctuation">.</span>jupiter<span class=3D"=
token punctuation">.</span>api<span class=3D"token punctuation">.</span>Tes=
t<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>params<span class=3D"token punctuation">=
.</span>ParameterizedTest<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>params<span class=3D"token punctuation">=
.</span>provider<span class=3D"token punctuation">.</span>NullSource<span c=
lass=3D"token punctuation">;</span>
<span class=3D"token keyword">import</span> org<span class=3D"token punctua=
tion">.</span>junit<span class=3D"token punctuation">.</span>jupiter<span c=
lass=3D"token punctuation">.</span>params<span class=3D"token punctuation">=
.</span>provider<span class=3D"token punctuation">.</span>ValueSource<span =
class=3D"token punctuation">;</span>

<span class=3D"token keyword">import</span> <span class=3D"token keyword">s=
tatic</span> org<span class=3D"token punctuation">.</span>junit<span class=
=3D"token punctuation">.</span>jupiter<span class=3D"token punctuation">.</=
span>api<span class=3D"token punctuation">.</span>Assertions<span class=3D"=
token punctuation">.</span>*<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">class</span> <span class=3D"token class-name"=
>NumbersTest</span> <span class=3D"token punctuation">{</span>

    <span class=3D"token annotation punctuation">@ParameterizedTest</span>
    <span class=3D"token annotation punctuation">@ValueSource</span><span c=
lass=3D"token punctuation">(</span>ints <span class=3D"token operator">=3D<=
/span> <span class=3D"token punctuation">{</span><span class=3D"token numbe=
r">2</span><span class=3D"token punctuation">,</span> <span class=3D"token =
number">4</span><span class=3D"token punctuation">,</span> <span class=3D"t=
oken number">6</span><span class=3D"token punctuation">}</span><span class=
=3D"token punctuation">)</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">isEven</span><span class=3D"token punctuation">(</span><span class=3D"tok=
en keyword">int</span> number<span class=3D"token punctuation">)</span> <sp=
an class=3D"token punctuation">{</span>

        <span class=3D"token function">assertTrue</span><span class=3D"toke=
n punctuation">(</span>Numbers<span class=3D"token punctuation">.</span><sp=
an class=3D"token function">isEven</span><span class=3D"token punctuation">=
(</span>number<span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
<span class=3D"token comment">// do it yourSelf</span>
    <span class=3D"token annotation punctuation">@Test</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">isOdd</span><span class=3D"token punctuation">(</span><span class=3D"toke=
n punctuation">)</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token annotation punctuation">@ParameterizedTest</span>
    <span class=3D"token annotation punctuation">@ValueSource</span><span c=
lass=3D"token punctuation">(</span>strings <span class=3D"token operator">=
=3D</span> <span class=3D"token punctuation">{</span><span class=3D"token s=
tring">""</span><span class=3D"token punctuation">,</span><span class=3D"to=
ken string">" "</span><span class=3D"token punctuation">}</span><span class=
=3D"token punctuation">)</span>
    <span class=3D"token keyword">void</span> <span class=3D"token function=
">isBlank</span><span class=3D"token punctuation">(</span>String input<span=
 class=3D"token punctuation">)</span> <span class=3D"token punctuation">{</=
span>
        <span class=3D"token function">assertTrue</span><span class=3D"toke=
n punctuation">(</span>Numbers<span class=3D"token punctuation">.</span><sp=
an class=3D"token function">isBlank</span><span class=3D"token punctuation"=
>(</span>input<span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

  =20
<span class=3D"token punctuation">}</span>

</code></pre>
<ul>
<li><em>short</em> (with the <em>shorts</em> attribute)</li>
<li><em>byte</em> (<em>bytes</em> attribute)</li>
<li><em>int</em> (<em>ints</em> attribute)</li>
<li><em>long</em> (<em>longs</em> attribute)</li>
<li><em>float</em> (<em>floats</em> attribute)</li>
<li><em>double</em> (<em>doubles</em> attribute)</li>
<li><em>char</em> (<em>chars</em> attribute)</li>
<li><em>java.lang.String</em> (<em>strings</em> attribute)</li>
<li><em>java.lang.Class</em> (<em>classes</em> attribute)</li>
</ul>
<p>Also, <mark>**we can only pass one argument to the test method each time=
.</mark></p>
<p>Before going any further, note that we didn=E2=80=99t pass <em>null</em>=
 as an argument. That=E2=80=99s another limitation<br>
<mark>we can=E2=80=99t pass null through a @ValueSource, even for String an=
d Class_</mark></p>
</div>



</body></html>
------MultipartBoundary--7bwVxE4MDWV3084bKWSM6ugJGxzIeb5egjlw877iPN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://stackedit.io/style.css

@charset "utf-8";

@font-face { font-family: KaTeX_AMS; src: url("/static/fonts/KaTeX_AMS-Regu=
lar.38a68f7.woff2") format("woff2"), url("/static/fonts/KaTeX_AMS-Regular.7=
d307e8.woff") format("woff"), url("/static/fonts/KaTeX_AMS-Regular.2dbe16b.=
ttf") format("truetype"); font-weight: 400; font-style: normal; }

@font-face { font-family: KaTeX_Caligraphic; src: url("/static/fonts/KaTeX_=
Caligraphic-Bold.342b296.woff2") format("woff2"), url("/static/fonts/KaTeX_=
Caligraphic-Bold.9634168.woff") format("woff"), url("/static/fonts/KaTeX_Ca=
ligraphic-Bold.33d2688.ttf") format("truetype"); font-weight: 700; font-sty=
le: normal; }

@font-face { font-family: KaTeX_Caligraphic; src: url("/static/fonts/KaTeX_=
Caligraphic-Regular.b500497.woff2") format("woff2"), url("/static/fonts/KaT=
eX_Caligraphic-Regular.00029fb.woff") format("woff"), url("/static/fonts/Ka=
TeX_Caligraphic-Regular.5e7940b.ttf") format("truetype"); font-weight: 400;=
 font-style: normal; }

@font-face { font-family: KaTeX_Fraktur; src: url("/static/fonts/KaTeX_Frak=
tur-Bold.7a3757c.woff2") format("woff2"), url("/static/fonts/KaTeX_Fraktur-=
Bold.4de87d4.woff") format("woff"), url("/static/fonts/KaTeX_Fraktur-Bold.e=
d33012.ttf") format("truetype"); font-weight: 700; font-style: normal; }

@font-face { font-family: KaTeX_Fraktur; src: url("/static/fonts/KaTeX_Frak=
tur-Regular.450cc4d.woff2") format("woff2"), url("/static/fonts/KaTeX_Frakt=
ur-Regular.dc4e330.woff") format("woff"), url("/static/fonts/KaTeX_Fraktur-=
Regular.82d05fe.ttf") format("truetype"); font-weight: 400; font-style: nor=
mal; }

@font-face { font-family: KaTeX_Main; src: url("/static/fonts/KaTeX_Main-Bo=
ld.78b0124.woff2") format("woff2"), url("/static/fonts/KaTeX_Main-Bold.62c6=
975.woff") format("woff"), url("/static/fonts/KaTeX_Main-Bold.2e1915b.ttf")=
 format("truetype"); font-weight: 700; font-style: normal; }

@font-face { font-family: KaTeX_Main; src: url("/static/fonts/KaTeX_Main-Bo=
ldItalic.c7213ce.woff2") format("woff2"), url("/static/fonts/KaTeX_Main-Bol=
dItalic.a2e3dcd.woff") format("woff"), url("/static/fonts/KaTeX_Main-BoldIt=
alic.0d817b4.ttf") format("truetype"); font-weight: 700; font-style: italic=
; }

@font-face { font-family: KaTeX_Main; src: url("/static/fonts/KaTeX_Main-It=
alic.eea3267.woff2") format("woff2"), url("/static/fonts/KaTeX_Main-Italic.=
081073f.woff") format("woff"), url("/static/fonts/KaTeX_Main-Italic.767e06e=
.ttf") format("truetype"); font-weight: 400; font-style: italic; }

@font-face { font-family: KaTeX_Main; src: url("/static/fonts/KaTeX_Main-Re=
gular.f30e3b2.woff2") format("woff2"), url("/static/fonts/KaTeX_Main-Regula=
r.756fad0.woff") format("woff"), url("/static/fonts/KaTeX_Main-Regular.689b=
be6.ttf") format("truetype"); font-weight: 400; font-style: normal; }

@font-face { font-family: KaTeX_Math; src: url("/static/fonts/KaTeX_Math-Bo=
ldItalic.753ca3d.woff2") format("woff2"), url("/static/fonts/KaTeX_Math-Bol=
dItalic.b3e80ff.woff") format("woff"), url("/static/fonts/KaTeX_Math-BoldIt=
alic.d9377b5.ttf") format("truetype"); font-weight: 700; font-style: italic=
; }

@font-face { font-family: KaTeX_Math; src: url("/static/fonts/KaTeX_Math-It=
alic.2a39f38.woff2") format("woff2"), url("/static/fonts/KaTeX_Math-Italic.=
67710bb.woff") format("woff"), url("/static/fonts/KaTeX_Math-Italic.0343f93=
.ttf") format("truetype"); font-weight: 400; font-style: italic; }

@font-face { font-family: KaTeX_SansSerif; src: url("/static/fonts/KaTeX_Sa=
nsSerif-Bold.59b3773.woff2") format("woff2"), url("/static/fonts/KaTeX_Sans=
Serif-Bold.f28c4fa.woff") format("woff"), url("/static/fonts/KaTeX_SansSeri=
f-Bold.dfcc59a.ttf") format("truetype"); font-weight: 700; font-style: norm=
al; }

@font-face { font-family: KaTeX_SansSerif; src: url("/static/fonts/KaTeX_Sa=
nsSerif-Italic.99ad93a.woff2") format("woff2"), url("/static/fonts/KaTeX_Sa=
nsSerif-Italic.9d0fdf5.woff") format("woff"), url("/static/fonts/KaTeX_Sans=
Serif-Italic.3ab5188.ttf") format("truetype"); font-weight: 400; font-style=
: italic; }

@font-face { font-family: KaTeX_SansSerif; src: url("/static/fonts/KaTeX_Sa=
nsSerif-Regular.badf359.woff2") format("woff2"), url("/static/fonts/KaTeX_S=
ansSerif-Regular.6c3bd5b.woff") format("woff"), url("/static/fonts/KaTeX_Sa=
nsSerif-Regular.d511ebc.ttf") format("truetype"); font-weight: 400; font-st=
yle: normal; }

@font-face { font-family: KaTeX_Script; src: url("/static/fonts/KaTeX_Scrip=
t-Regular.af7bc98.woff2") format("woff2"), url("/static/fonts/KaTeX_Script-=
Regular.4edf4e0.woff") format("woff"), url("/static/fonts/KaTeX_Script-Regu=
lar.082640c.ttf") format("truetype"); font-weight: 400; font-style: normal;=
 }

@font-face { font-family: KaTeX_Size1; src: url("/static/fonts/KaTeX_Size1-=
Regular.10ec8be.woff2") format("woff2"), url("/static/fonts/KaTeX_Size1-Reg=
ular.35b9977.woff") format("woff"), url("/static/fonts/KaTeX_Size1-Regular.=
2c2dc3b.ttf") format("truetype"); font-weight: 400; font-style: normal; }

@font-face { font-family: KaTeX_Size2; src: url("/static/fonts/KaTeX_Size2-=
Regular.96a09bf.woff2") format("woff2"), url("/static/fonts/KaTeX_Size2-Reg=
ular.9932a08.woff") format("woff"), url("/static/fonts/KaTeX_Size2-Regular.=
114ad19.ttf") format("truetype"); font-weight: 400; font-style: normal; }

@font-face { font-family: KaTeX_Size3; src: url("/static/fonts/KaTeX_Size3-=
Regular.2c2f0ef.woff2") format("woff2"), url("/static/fonts/KaTeX_Size3-Reg=
ular.2afba15.woff") format("woff"), url("/static/fonts/KaTeX_Size3-Regular.=
a287c06.ttf") format("truetype"); font-weight: 400; font-style: normal; }

@font-face { font-family: KaTeX_Size4; src: url("/static/fonts/KaTeX_Size4-=
Regular.d5822f1.woff2") format("woff2"), url("/static/fonts/KaTeX_Size4-Reg=
ular.f961545.woff") format("woff"), url("/static/fonts/KaTeX_Size4-Regular.=
70174da.ttf") format("truetype"); font-weight: 400; font-style: normal; }

@font-face { font-family: KaTeX_Typewriter; src: url("/static/fonts/KaTeX_T=
ypewriter-Regular.641339e.woff2") format("woff2"), url("/static/fonts/KaTeX=
_Typewriter-Regular.53dcf86.woff") format("woff"), url("/static/fonts/KaTeX=
_Typewriter-Regular.35fe2cc.ttf") format("truetype"); font-weight: 400; fon=
t-style: normal; }

.katex { font: 1.21em / 1.2 KaTeX_Main, "Times New Roman", serif; text-inde=
nt: 0px; text-rendering: auto; border-color: currentcolor; }

.katex * { forced-color-adjust: none !important; }

.katex .katex-version::after { content: "0.13.0"; }

.katex .katex-mathml { position: absolute; clip: rect(1px, 1px, 1px, 1px); =
padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden; }

.katex .katex-html > .newline { display: block; }

.katex .base { position: relative; white-space: nowrap; width: min-content;=
 }

.katex .base, .katex .strut { display: inline-block; }

.katex .textbf { font-weight: 700; }

.katex .textit { font-style: italic; }

.katex .textrm { font-family: KaTeX_Main; }

.katex .textsf { font-family: KaTeX_SansSerif; }

.katex .texttt { font-family: KaTeX_Typewriter; }

.katex .mathnormal { font-family: KaTeX_Math; font-style: italic; }

.katex .mathit { font-family: KaTeX_Main; font-style: italic; }

.katex .mathrm { font-style: normal; }

.katex .mathbf { font-family: KaTeX_Main; font-weight: 700; }

.katex .boldsymbol { font-family: KaTeX_Math; font-weight: 700; font-style:=
 italic; }

.katex .amsrm, .katex .mathbb, .katex .textbb { font-family: KaTeX_AMS; }

.katex .mathcal { font-family: KaTeX_Caligraphic; }

.katex .mathfrak, .katex .textfrak { font-family: KaTeX_Fraktur; }

.katex .mathtt { font-family: KaTeX_Typewriter; }

.katex .mathscr, .katex .textscr { font-family: KaTeX_Script; }

.katex .mathsf, .katex .textsf { font-family: KaTeX_SansSerif; }

.katex .mathboldsf, .katex .textboldsf { font-family: KaTeX_SansSerif; font=
-weight: 700; }

.katex .mathitsf, .katex .textitsf { font-family: KaTeX_SansSerif; font-sty=
le: italic; }

.katex .mainrm { font-family: KaTeX_Main; font-style: normal; }

.katex .vlist-t { display: inline-table; table-layout: fixed; border-collap=
se: collapse; }

.katex .vlist-r { display: table-row; }

.katex .vlist { display: table-cell; vertical-align: bottom; position: rela=
tive; }

.katex .vlist > span { display: block; height: 0px; position: relative; }

.katex .vlist > span > span { display: inline-block; }

.katex .vlist > span > .pstrut { overflow: hidden; width: 0px; }

.katex .vlist-t2 { margin-right: -2px; }

.katex .vlist-s { display: table-cell; vertical-align: bottom; font-size: 1=
px; width: 2px; min-width: 2px; }

.katex .vbox { display: inline-flex; flex-direction: column; align-items: b=
aseline; }

.katex .hbox { width: 100%; }

.katex .hbox, .katex .thinbox { display: inline-flex; flex-direction: row; =
}

.katex .thinbox { width: 0px; max-width: 0px; }

.katex .msupsub { text-align: left; }

.katex .mfrac > span > span { text-align: center; }

.katex .mfrac .frac-line { display: inline-block; width: 100%; border-botto=
m-style: solid; }

.katex .hdashline, .katex .hline, .katex .mfrac .frac-line, .katex .overlin=
e .overline-line, .katex .rule, .katex .underline .underline-line { min-hei=
ght: 1px; }

.katex .mspace { display: inline-block; }

.katex .clap, .katex .llap, .katex .rlap { width: 0px; position: relative; =
}

.katex .clap > .inner, .katex .llap > .inner, .katex .rlap > .inner { posit=
ion: absolute; }

.katex .clap > .fix, .katex .llap > .fix, .katex .rlap > .fix { display: in=
line-block; }

.katex .llap > .inner { right: 0px; }

.katex .clap > .inner, .katex .rlap > .inner { left: 0px; }

.katex .clap > .inner > span { margin-left: -50%; margin-right: 50%; }

.katex .rule { display: inline-block; border: 0px solid; position: relative=
; }

.katex .hline, .katex .overline .overline-line, .katex .underline .underlin=
e-line { display: inline-block; width: 100%; border-bottom-style: solid; }

.katex .hdashline { display: inline-block; width: 100%; border-bottom-style=
: dashed; }

.katex .sqrt > .root { margin-left: 0.277778em; margin-right: -0.555556em; =
}

.katex .fontsize-ensurer.reset-size1.size1, .katex .sizing.reset-size1.size=
1 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size1.size2, .katex .sizing.reset-size1.size=
2 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size1.size3, .katex .sizing.reset-size1.size=
3 { font-size: 1.4em; }

.katex .fontsize-ensurer.reset-size1.size4, .katex .sizing.reset-size1.size=
4 { font-size: 1.6em; }

.katex .fontsize-ensurer.reset-size1.size5, .katex .sizing.reset-size1.size=
5 { font-size: 1.8em; }

.katex .fontsize-ensurer.reset-size1.size6, .katex .sizing.reset-size1.size=
6 { font-size: 2em; }

.katex .fontsize-ensurer.reset-size1.size7, .katex .sizing.reset-size1.size=
7 { font-size: 2.4em; }

.katex .fontsize-ensurer.reset-size1.size8, .katex .sizing.reset-size1.size=
8 { font-size: 2.88em; }

.katex .fontsize-ensurer.reset-size1.size9, .katex .sizing.reset-size1.size=
9 { font-size: 3.456em; }

.katex .fontsize-ensurer.reset-size1.size10, .katex .sizing.reset-size1.siz=
e10 { font-size: 4.148em; }

.katex .fontsize-ensurer.reset-size1.size11, .katex .sizing.reset-size1.siz=
e11 { font-size: 4.976em; }

.katex .fontsize-ensurer.reset-size2.size1, .katex .sizing.reset-size2.size=
1 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size2.size2, .katex .sizing.reset-size2.size=
2 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size2.size3, .katex .sizing.reset-size2.size=
3 { font-size: 1.16667em; }

.katex .fontsize-ensurer.reset-size2.size4, .katex .sizing.reset-size2.size=
4 { font-size: 1.33333em; }

.katex .fontsize-ensurer.reset-size2.size5, .katex .sizing.reset-size2.size=
5 { font-size: 1.5em; }

.katex .fontsize-ensurer.reset-size2.size6, .katex .sizing.reset-size2.size=
6 { font-size: 1.66667em; }

.katex .fontsize-ensurer.reset-size2.size7, .katex .sizing.reset-size2.size=
7 { font-size: 2em; }

.katex .fontsize-ensurer.reset-size2.size8, .katex .sizing.reset-size2.size=
8 { font-size: 2.4em; }

.katex .fontsize-ensurer.reset-size2.size9, .katex .sizing.reset-size2.size=
9 { font-size: 2.88em; }

.katex .fontsize-ensurer.reset-size2.size10, .katex .sizing.reset-size2.siz=
e10 { font-size: 3.45667em; }

.katex .fontsize-ensurer.reset-size2.size11, .katex .sizing.reset-size2.siz=
e11 { font-size: 4.14667em; }

.katex .fontsize-ensurer.reset-size3.size1, .katex .sizing.reset-size3.size=
1 { font-size: 0.714286em; }

.katex .fontsize-ensurer.reset-size3.size2, .katex .sizing.reset-size3.size=
2 { font-size: 0.857143em; }

.katex .fontsize-ensurer.reset-size3.size3, .katex .sizing.reset-size3.size=
3 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size3.size4, .katex .sizing.reset-size3.size=
4 { font-size: 1.14286em; }

.katex .fontsize-ensurer.reset-size3.size5, .katex .sizing.reset-size3.size=
5 { font-size: 1.28571em; }

.katex .fontsize-ensurer.reset-size3.size6, .katex .sizing.reset-size3.size=
6 { font-size: 1.42857em; }

.katex .fontsize-ensurer.reset-size3.size7, .katex .sizing.reset-size3.size=
7 { font-size: 1.71429em; }

.katex .fontsize-ensurer.reset-size3.size8, .katex .sizing.reset-size3.size=
8 { font-size: 2.05714em; }

.katex .fontsize-ensurer.reset-size3.size9, .katex .sizing.reset-size3.size=
9 { font-size: 2.46857em; }

.katex .fontsize-ensurer.reset-size3.size10, .katex .sizing.reset-size3.siz=
e10 { font-size: 2.96286em; }

.katex .fontsize-ensurer.reset-size3.size11, .katex .sizing.reset-size3.siz=
e11 { font-size: 3.55429em; }

.katex .fontsize-ensurer.reset-size4.size1, .katex .sizing.reset-size4.size=
1 { font-size: 0.625em; }

.katex .fontsize-ensurer.reset-size4.size2, .katex .sizing.reset-size4.size=
2 { font-size: 0.75em; }

.katex .fontsize-ensurer.reset-size4.size3, .katex .sizing.reset-size4.size=
3 { font-size: 0.875em; }

.katex .fontsize-ensurer.reset-size4.size4, .katex .sizing.reset-size4.size=
4 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size4.size5, .katex .sizing.reset-size4.size=
5 { font-size: 1.125em; }

.katex .fontsize-ensurer.reset-size4.size6, .katex .sizing.reset-size4.size=
6 { font-size: 1.25em; }

.katex .fontsize-ensurer.reset-size4.size7, .katex .sizing.reset-size4.size=
7 { font-size: 1.5em; }

.katex .fontsize-ensurer.reset-size4.size8, .katex .sizing.reset-size4.size=
8 { font-size: 1.8em; }

.katex .fontsize-ensurer.reset-size4.size9, .katex .sizing.reset-size4.size=
9 { font-size: 2.16em; }

.katex .fontsize-ensurer.reset-size4.size10, .katex .sizing.reset-size4.siz=
e10 { font-size: 2.5925em; }

.katex .fontsize-ensurer.reset-size4.size11, .katex .sizing.reset-size4.siz=
e11 { font-size: 3.11em; }

.katex .fontsize-ensurer.reset-size5.size1, .katex .sizing.reset-size5.size=
1 { font-size: 0.555556em; }

.katex .fontsize-ensurer.reset-size5.size2, .katex .sizing.reset-size5.size=
2 { font-size: 0.666667em; }

.katex .fontsize-ensurer.reset-size5.size3, .katex .sizing.reset-size5.size=
3 { font-size: 0.777778em; }

.katex .fontsize-ensurer.reset-size5.size4, .katex .sizing.reset-size5.size=
4 { font-size: 0.888889em; }

.katex .fontsize-ensurer.reset-size5.size5, .katex .sizing.reset-size5.size=
5 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size5.size6, .katex .sizing.reset-size5.size=
6 { font-size: 1.11111em; }

.katex .fontsize-ensurer.reset-size5.size7, .katex .sizing.reset-size5.size=
7 { font-size: 1.33333em; }

.katex .fontsize-ensurer.reset-size5.size8, .katex .sizing.reset-size5.size=
8 { font-size: 1.6em; }

.katex .fontsize-ensurer.reset-size5.size9, .katex .sizing.reset-size5.size=
9 { font-size: 1.92em; }

.katex .fontsize-ensurer.reset-size5.size10, .katex .sizing.reset-size5.siz=
e10 { font-size: 2.30444em; }

.katex .fontsize-ensurer.reset-size5.size11, .katex .sizing.reset-size5.siz=
e11 { font-size: 2.76444em; }

.katex .fontsize-ensurer.reset-size6.size1, .katex .sizing.reset-size6.size=
1 { font-size: 0.5em; }

.katex .fontsize-ensurer.reset-size6.size2, .katex .sizing.reset-size6.size=
2 { font-size: 0.6em; }

.katex .fontsize-ensurer.reset-size6.size3, .katex .sizing.reset-size6.size=
3 { font-size: 0.7em; }

.katex .fontsize-ensurer.reset-size6.size4, .katex .sizing.reset-size6.size=
4 { font-size: 0.8em; }

.katex .fontsize-ensurer.reset-size6.size5, .katex .sizing.reset-size6.size=
5 { font-size: 0.9em; }

.katex .fontsize-ensurer.reset-size6.size6, .katex .sizing.reset-size6.size=
6 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size6.size7, .katex .sizing.reset-size6.size=
7 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size6.size8, .katex .sizing.reset-size6.size=
8 { font-size: 1.44em; }

.katex .fontsize-ensurer.reset-size6.size9, .katex .sizing.reset-size6.size=
9 { font-size: 1.728em; }

.katex .fontsize-ensurer.reset-size6.size10, .katex .sizing.reset-size6.siz=
e10 { font-size: 2.074em; }

.katex .fontsize-ensurer.reset-size6.size11, .katex .sizing.reset-size6.siz=
e11 { font-size: 2.488em; }

.katex .fontsize-ensurer.reset-size7.size1, .katex .sizing.reset-size7.size=
1 { font-size: 0.416667em; }

.katex .fontsize-ensurer.reset-size7.size2, .katex .sizing.reset-size7.size=
2 { font-size: 0.5em; }

.katex .fontsize-ensurer.reset-size7.size3, .katex .sizing.reset-size7.size=
3 { font-size: 0.583333em; }

.katex .fontsize-ensurer.reset-size7.size4, .katex .sizing.reset-size7.size=
4 { font-size: 0.666667em; }

.katex .fontsize-ensurer.reset-size7.size5, .katex .sizing.reset-size7.size=
5 { font-size: 0.75em; }

.katex .fontsize-ensurer.reset-size7.size6, .katex .sizing.reset-size7.size=
6 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size7.size7, .katex .sizing.reset-size7.size=
7 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size7.size8, .katex .sizing.reset-size7.size=
8 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size7.size9, .katex .sizing.reset-size7.size=
9 { font-size: 1.44em; }

.katex .fontsize-ensurer.reset-size7.size10, .katex .sizing.reset-size7.siz=
e10 { font-size: 1.72833em; }

.katex .fontsize-ensurer.reset-size7.size11, .katex .sizing.reset-size7.siz=
e11 { font-size: 2.07333em; }

.katex .fontsize-ensurer.reset-size8.size1, .katex .sizing.reset-size8.size=
1 { font-size: 0.347222em; }

.katex .fontsize-ensurer.reset-size8.size2, .katex .sizing.reset-size8.size=
2 { font-size: 0.416667em; }

.katex .fontsize-ensurer.reset-size8.size3, .katex .sizing.reset-size8.size=
3 { font-size: 0.486111em; }

.katex .fontsize-ensurer.reset-size8.size4, .katex .sizing.reset-size8.size=
4 { font-size: 0.555556em; }

.katex .fontsize-ensurer.reset-size8.size5, .katex .sizing.reset-size8.size=
5 { font-size: 0.625em; }

.katex .fontsize-ensurer.reset-size8.size6, .katex .sizing.reset-size8.size=
6 { font-size: 0.694444em; }

.katex .fontsize-ensurer.reset-size8.size7, .katex .sizing.reset-size8.size=
7 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size8.size8, .katex .sizing.reset-size8.size=
8 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size8.size9, .katex .sizing.reset-size8.size=
9 { font-size: 1.2em; }

.katex .fontsize-ensurer.reset-size8.size10, .katex .sizing.reset-size8.siz=
e10 { font-size: 1.44028em; }

.katex .fontsize-ensurer.reset-size8.size11, .katex .sizing.reset-size8.siz=
e11 { font-size: 1.72778em; }

.katex .fontsize-ensurer.reset-size9.size1, .katex .sizing.reset-size9.size=
1 { font-size: 0.289352em; }

.katex .fontsize-ensurer.reset-size9.size2, .katex .sizing.reset-size9.size=
2 { font-size: 0.347222em; }

.katex .fontsize-ensurer.reset-size9.size3, .katex .sizing.reset-size9.size=
3 { font-size: 0.405093em; }

.katex .fontsize-ensurer.reset-size9.size4, .katex .sizing.reset-size9.size=
4 { font-size: 0.462963em; }

.katex .fontsize-ensurer.reset-size9.size5, .katex .sizing.reset-size9.size=
5 { font-size: 0.520833em; }

.katex .fontsize-ensurer.reset-size9.size6, .katex .sizing.reset-size9.size=
6 { font-size: 0.578704em; }

.katex .fontsize-ensurer.reset-size9.size7, .katex .sizing.reset-size9.size=
7 { font-size: 0.694444em; }

.katex .fontsize-ensurer.reset-size9.size8, .katex .sizing.reset-size9.size=
8 { font-size: 0.833333em; }

.katex .fontsize-ensurer.reset-size9.size9, .katex .sizing.reset-size9.size=
9 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size9.size10, .katex .sizing.reset-size9.siz=
e10 { font-size: 1.20023em; }

.katex .fontsize-ensurer.reset-size9.size11, .katex .sizing.reset-size9.siz=
e11 { font-size: 1.43981em; }

.katex .fontsize-ensurer.reset-size10.size1, .katex .sizing.reset-size10.si=
ze1 { font-size: 0.24108em; }

.katex .fontsize-ensurer.reset-size10.size2, .katex .sizing.reset-size10.si=
ze2 { font-size: 0.289296em; }

.katex .fontsize-ensurer.reset-size10.size3, .katex .sizing.reset-size10.si=
ze3 { font-size: 0.337512em; }

.katex .fontsize-ensurer.reset-size10.size4, .katex .sizing.reset-size10.si=
ze4 { font-size: 0.385728em; }

.katex .fontsize-ensurer.reset-size10.size5, .katex .sizing.reset-size10.si=
ze5 { font-size: 0.433944em; }

.katex .fontsize-ensurer.reset-size10.size6, .katex .sizing.reset-size10.si=
ze6 { font-size: 0.48216em; }

.katex .fontsize-ensurer.reset-size10.size7, .katex .sizing.reset-size10.si=
ze7 { font-size: 0.578592em; }

.katex .fontsize-ensurer.reset-size10.size8, .katex .sizing.reset-size10.si=
ze8 { font-size: 0.694311em; }

.katex .fontsize-ensurer.reset-size10.size9, .katex .sizing.reset-size10.si=
ze9 { font-size: 0.833173em; }

.katex .fontsize-ensurer.reset-size10.size10, .katex .sizing.reset-size10.s=
ize10 { font-size: 1em; }

.katex .fontsize-ensurer.reset-size10.size11, .katex .sizing.reset-size10.s=
ize11 { font-size: 1.19961em; }

.katex .fontsize-ensurer.reset-size11.size1, .katex .sizing.reset-size11.si=
ze1 { font-size: 0.200965em; }

.katex .fontsize-ensurer.reset-size11.size2, .katex .sizing.reset-size11.si=
ze2 { font-size: 0.241158em; }

.katex .fontsize-ensurer.reset-size11.size3, .katex .sizing.reset-size11.si=
ze3 { font-size: 0.28135em; }

.katex .fontsize-ensurer.reset-size11.size4, .katex .sizing.reset-size11.si=
ze4 { font-size: 0.321543em; }

.katex .fontsize-ensurer.reset-size11.size5, .katex .sizing.reset-size11.si=
ze5 { font-size: 0.361736em; }

.katex .fontsize-ensurer.reset-size11.size6, .katex .sizing.reset-size11.si=
ze6 { font-size: 0.401929em; }

.katex .fontsize-ensurer.reset-size11.size7, .katex .sizing.reset-size11.si=
ze7 { font-size: 0.482315em; }

.katex .fontsize-ensurer.reset-size11.size8, .katex .sizing.reset-size11.si=
ze8 { font-size: 0.578778em; }

.katex .fontsize-ensurer.reset-size11.size9, .katex .sizing.reset-size11.si=
ze9 { font-size: 0.694534em; }

.katex .fontsize-ensurer.reset-size11.size10, .katex .sizing.reset-size11.s=
ize10 { font-size: 0.833601em; }

.katex .fontsize-ensurer.reset-size11.size11, .katex .sizing.reset-size11.s=
ize11 { font-size: 1em; }

.katex .delimsizing.size1 { font-family: KaTeX_Size1; }

.katex .delimsizing.size2 { font-family: KaTeX_Size2; }

.katex .delimsizing.size3 { font-family: KaTeX_Size3; }

.katex .delimsizing.size4 { font-family: KaTeX_Size4; }

.katex .delimsizing.mult .delim-size1 > span { font-family: KaTeX_Size1; }

.katex .delimsizing.mult .delim-size4 > span { font-family: KaTeX_Size4; }

.katex .nulldelimiter { display: inline-block; width: 0.12em; }

.katex .delimcenter, .katex .op-symbol { position: relative; }

.katex .op-symbol.small-op { font-family: KaTeX_Size1; }

.katex .op-symbol.large-op { font-family: KaTeX_Size2; }

.katex .accent > .vlist-t, .katex .op-limits > .vlist-t { text-align: cente=
r; }

.katex .accent .accent-body { position: relative; }

.katex .accent .accent-body:not(.accent-full) { width: 0px; }

.katex .overlay { display: block; }

.katex .mtable .vertical-separator { display: inline-block; min-width: 1px;=
 }

.katex .mtable .arraycolsep { display: inline-block; }

.katex .mtable .col-align-c > .vlist-t { text-align: center; }

.katex .mtable .col-align-l > .vlist-t { text-align: left; }

.katex .mtable .col-align-r > .vlist-t { text-align: right; }

.katex .svg-align { text-align: left; }

.katex svg { display: block; position: absolute; width: 100%; height: inher=
it; fill: currentcolor; stroke: currentcolor; fill-rule: nonzero; fill-opac=
ity: 1; stroke-width: 1; stroke-linecap: butt; stroke-linejoin: miter; stro=
ke-miterlimit: 4; stroke-dasharray: none; stroke-dashoffset: 0; stroke-opac=
ity: 1; }

.katex svg path { stroke: none; }

.katex img { border-style: none; min-width: 0px; min-height: 0px; max-width=
: none; max-height: none; }

.katex .stretchy { width: 100%; display: block; position: relative; overflo=
w: hidden; }

.katex .stretchy::after, .katex .stretchy::before { content: ""; }

.katex .hide-tail { width: 100%; position: relative; overflow: hidden; }

.katex .halfarrow-left { position: absolute; left: 0px; width: 50.2%; overf=
low: hidden; }

.katex .halfarrow-right { position: absolute; right: 0px; width: 50.2%; ove=
rflow: hidden; }

.katex .brace-left { position: absolute; left: 0px; width: 25.1%; overflow:=
 hidden; }

.katex .brace-center { position: absolute; left: 25%; width: 50%; overflow:=
 hidden; }

.katex .brace-right { position: absolute; right: 0px; width: 25.1%; overflo=
w: hidden; }

.katex .x-arrow-pad { padding: 0px 0.5em; }

.katex .cd-arrow-pad { padding: 0px 0.55556em 0px 0.27778em; }

.katex .mover, .katex .munder, .katex .x-arrow { text-align: center; }

.katex .boxpad { padding: 0px 0.3em; }

.katex .fbox, .katex .fcolorbox { box-sizing: border-box; border: 0.04em so=
lid; }

.katex .cancel-pad { padding: 0px 0.2em; }

.katex .cancel-lap { margin-left: -0.2em; margin-right: -0.2em; }

.katex .sout { border-bottom-style: solid; border-bottom-width: 0.08em; }

.katex .angl { border-top: 0.049em solid; border-right: 0.049em solid; marg=
in-right: 0.03889em; }

.katex .anglpad { padding: 0px 0.03889em; }

.katex .eqn-num::before { counter-increment: a 1; content: "(" counter(a) "=
)"; }

.katex .mml-eqn-num::before { counter-increment: b 1; content: "(" counter(=
b) ")"; }

.katex .mtr-glue { width: 50%; }

.katex .cd-vert-arrow { display: inline-block; position: relative; }

.katex .cd-label-left { display: inline-block; position: absolute; right: c=
alc(50% + 0.3em); text-align: left; }

.katex .cd-label-right { display: inline-block; position: absolute; left: c=
alc(50% + 0.3em); text-align: right; }

.katex-display { display: block; margin: 1em 0px; text-align: center; }

.katex-display > .katex { display: block; text-align: center; white-space: =
nowrap; }

.katex-display > .katex > .katex-html { display: block; position: relative;=
 }

.katex-display > .katex > .katex-html > .tag { position: absolute; right: 0=
px; }

.katex-display.leqno > .katex > .katex-html > .tag { left: 0px; right: auto=
; }

.katex-display.fleqn > .katex { text-align: left; padding-left: 2em; }

body { counter-reset: a 0 b 0; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
url("/static/fonts/lato-normal.27bd77b.woff") format("woff"); }

@font-face { font-family: Lato; font-style: italic; font-weight: 400; src: =
url("/static/fonts/lato-normal-italic.f28f2d6.woff") format("woff"); }

@font-face { font-family: Lato; font-style: normal; font-weight: 600; src: =
url("/static/fonts/lato-black.f80bda6.woff") format("woff"); }

@font-face { font-family: Lato; font-style: italic; font-weight: 600; src: =
url("/static/fonts/lato-black-italic.798eafd.woff") format("woff"); }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; src: url("/static/fonts/RobotoMono-Regular.0b6a547.woff") format("woff"=
); }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 6=
00; src: url("/static/fonts/RobotoMono-Bold.819f3b2.woff") format("woff"); =
}

.prism *, .token.pre.gfm * { font-weight: inherit !important; }

.prism .token.cdata, .prism .token.comment, .prism .token.doctype, .prism .=
token.prolog, .token.pre.gfm .token.cdata, .token.pre.gfm .token.comment, .=
token.pre.gfm .token.doctype, .token.pre.gfm .token.prolog { color: rgb(112=
, 128, 144); }

.prism .token.punctuation, .token.pre.gfm .token.punctuation { color: rgb(1=
53, 153, 153); }

.prism .namespace, .token.pre.gfm .namespace { opacity: 0.7; }

.prism .token.boolean, .prism .token.constant, .prism .token.deleted, .pris=
m .token.number, .prism .token.property, .prism .token.symbol, .prism .toke=
n.tag, .token.pre.gfm .token.boolean, .token.pre.gfm .token.constant, .toke=
n.pre.gfm .token.deleted, .token.pre.gfm .token.number, .token.pre.gfm .tok=
en.property, .token.pre.gfm .token.symbol, .token.pre.gfm .token.tag { colo=
r: rgb(153, 0, 85); }

.prism .token.attr-name, .prism .token.builtin, .prism .token.char, .prism =
.token.inserted, .prism .token.selector, .prism .token.string, .token.pre.g=
fm .token.attr-name, .token.pre.gfm .token.builtin, .token.pre.gfm .token.c=
har, .token.pre.gfm .token.inserted, .token.pre.gfm .token.selector, .token=
.pre.gfm .token.string { color: rgb(102, 153, 0); }

.prism .language-css .token.string, .prism .style .token.string, .prism .to=
ken.entity, .prism .token.operator, .prism .token.url, .token.pre.gfm .lang=
uage-css .token.string, .token.pre.gfm .style .token.string, .token.pre.gfm=
 .token.entity, .token.pre.gfm .token.operator, .token.pre.gfm .token.url {=
 color: rgb(166, 127, 89); }

.prism .token.atrule, .prism .token.attr-value, .prism .token.keyword, .tok=
en.pre.gfm .token.atrule, .token.pre.gfm .token.attr-value, .token.pre.gfm =
.token.keyword { color: rgb(0, 119, 170); }

.prism .token.function, .token.pre.gfm .token.function { color: rgb(221, 74=
, 104); }

.prism .token.important, .prism .token.regex, .prism .token.variable, .toke=
n.pre.gfm .token.important, .token.pre.gfm .token.regex, .token.pre.gfm .to=
ken.variable { color: rgb(238, 153, 0); }

.prism .token.bold, .prism .token.important, .token.pre.gfm .token.bold, .t=
oken.pre.gfm .token.important { font-weight: 500; }

.prism .token.italic, .token.pre.gfm .token.italic { font-style: italic; }

html { line-height: 1.15; text-size-adjust: 100%; }

body { margin: 0px; }

article, aside, footer, header, nav, section { display: block; }

h1 { font-size: 2em; margin: 0.67em 0px; }

figcaption, figure { display: block; }

figure { margin: 1em 40px; }

hr { box-sizing: content-box; height: 0px; overflow: visible; }

main { display: block; }

pre { font-family: monospace, monospace; font-size: 1em; }

a { background-color: transparent; }

abbr[title] { border-bottom: none; text-decoration: underline dotted; }

b, strong { font-weight: bolder; }

code, kbd, samp { font-family: monospace, monospace; font-size: 1em; }

dfn { font-style: italic; }

mark { background-color: rgb(255, 255, 0); color: rgb(0, 0, 0); }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

audio, video { display: inline-block; }

audio:not([controls]) { display: none; height: 0px; }

img { border-style: none; }

svg:not(:root) { overflow: hidden; }

button, input, optgroup, select, textarea { font-family: sans-serif; font-s=
ize: 100%; line-height: 1.15; margin: 0px; }

button { overflow: visible; }

button, select { text-transform: none; }

[type=3D"reset"], [type=3D"submit"], button, html [type=3D"button"] { appea=
rance: button; }

input { overflow: visible; }

[type=3D"checkbox"], [type=3D"radio"] { box-sizing: border-box; padding: 0p=
x; }

[type=3D"number"]::-webkit-inner-spin-button, [type=3D"number"]::-webkit-ou=
ter-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

[type=3D"search"]::-webkit-search-cancel-button, [type=3D"search"]::-webkit=
-search-decoration { appearance: none; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

fieldset { padding: 0.35em 0.75em 0.625em; }

legend { box-sizing: border-box; display: table; max-width: 100%; padding: =
0px; color: inherit; white-space: normal; }

progress { display: inline-block; vertical-align: baseline; }

textarea { overflow: auto; }

details { display: block; }

summary { display: list-item; }

menu { display: block; }

canvas { display: inline-block; }

[hidden], template { display: none; }

body, html { color: rgba(0, 0, 0, 0.75); font-size: 16px; font-family: Lato=
, "Helvetica Neue", Helvetica, sans-serif; font-variant-ligatures: common-l=
igatures; line-height: 1.67; -webkit-font-smoothing: antialiased; }

.app--dark .layout__panel--editor, .app--dark .layout__panel--preview { col=
or: rgba(255, 255, 255, 0.75); }

blockquote, dl, ol, p, pre, ul { margin: 1.2em 0px; }

h1, h2, h3, h4, h5, h6 { margin: 1.8em 0px; line-height: 1.33; }

h1::after, h2::after { content: ""; display: block; position: relative; top=
: 0.33em; border-bottom: 1px solid rgba(128, 128, 128, 0.33); }

ol ol, ol ul, ul ol, ul ul { margin: 0px; }

dt { font-weight: 700; }

a { color: rgb(12, 147, 228); text-decoration: underline; }

a:focus, a:hover { text-decoration: none; }

code, pre, samp { font-family: "Roboto Mono", "Lucida Sans Typewriter", "Lu=
cida Console", monaco, Courrier, monospace; font-size: 0.85em; }

code *, pre *, samp * { font-size: inherit; }

blockquote { color: rgba(0, 0, 0, 0.5); padding-left: 1.5em; border-left: 5=
px solid rgba(0, 0, 0, 0.1); }

.app--dark .layout__panel--editor blockquote, .app--dark .layout__panel--pr=
eview blockquote { color: rgba(255, 255, 255, 0.4); border-left-color: rgba=
(255, 255, 255, 0.1); }

code { background-color: rgba(0, 0, 0, 0.05); border-radius: 3px; padding: =
2px 4px; }

hr { border-width: 1px 0px 0px; border-right-style: initial; border-bottom-=
style: initial; border-left-style: initial; border-right-color: initial; bo=
rder-bottom-color: initial; border-left-color: initial; border-image: initi=
al; border-top-style: solid; border-top-color: rgba(128, 128, 128, 0.33); m=
argin: 2em 0px; }

pre > code { background-color: rgba(0, 0, 0, 0.05); display: block; padding=
: 0.5em; text-size-adjust: none; overflow-x: auto; white-space: pre; }

.toc ul { list-style-type: none; padding-left: 20px; }

table { background-color: transparent; border-collapse: collapse; border-sp=
acing: 0px; }

td, th { border-right: 1px solid rgb(220, 220, 220); padding: 8px 12px; }

td:last-child, th:last-child { border-right: 0px; }

td { border-top: 1px solid rgb(220, 220, 220); }

mark { background-color: rgb(248, 248, 64); }

kbd { font-family: Lato, "Helvetica Neue", Helvetica, sans-serif; backgroun=
d-color: rgb(255, 255, 255); border: 1px solid rgba(63, 63, 63, 0.25); bord=
er-radius: 3px; box-shadow: rgba(63, 63, 63, 0.25) 0px 1px 0px; color: rgb(=
51, 51, 51); display: inline-block; font-size: 0.8em; margin: 0px 0.1em; pa=
dding: 0.1em 0.6em; white-space: nowrap; }

abbr[title] { border-bottom: 1px dotted rgb(119, 119, 119); cursor: help; }

img { max-width: 100%; }

.task-list-item { list-style-type: none; }

.task-list-item-checkbox { margin: 0px 0.2em 0px -1.3em; }

.footnote { font-size: 0.8em; position: relative; top: -0.25em; vertical-al=
ign: top; }

.page-break-after { break-after: page; }

.abc-notation-block { overflow-x: auto !important; }

.stackedit__html { margin-bottom: 180px; margin-left: auto; margin-right: a=
uto; padding-left: 30px; padding-right: 30px; max-width: 750px; }

.stackedit__toc ul { padding: 0px; }

.stackedit__toc ul a { margin: 0.5rem 0px; padding: 0.5rem 1rem; }

.stackedit__toc ul ul { color: rgb(136, 136, 136); font-size: 0.9em; }

.stackedit__toc ul ul a { margin: 0px; padding: 0.1rem 1rem; }

.stackedit__toc li { display: block; }

.stackedit__toc a { display: block; color: inherit; text-decoration: none; =
}

.stackedit__toc a:active, .stackedit__toc a:focus, .stackedit__toc a:hover =
{ background-color: rgba(0, 0, 0, 0.075); border-radius: 3px; }

.stackedit__left { position: fixed; display: none; width: 250px; height: 10=
0%; top: 0px; left: 0px; overflow: hidden auto; }

@media (min-width: 1060px) {
  .stackedit__left { display: block; }
}

.stackedit__right { position: absolute; right: 0px; top: 0px; left: 0px; }

@media (min-width: 1060px) {
  .stackedit__right { left: 250px; }
}

.stackedit--pdf blockquote { border-left-color: rgb(236, 236, 236); }

.stackedit--pdf .katex-mathml, .stackedit--pdf annotation { display: none; =
}

.stackedit--pdf .stackedit__html { padding-left: 0px; padding-right: 0px; m=
ax-width: none; }
------MultipartBoundary--7bwVxE4MDWV3084bKWSM6ugJGxzIeb5egjlw877iPN------
